import sqlite3
import os
import uuid
from datetime import datetime, timedelta

# Import c√°c h·∫±ng s·ªë tr·∫°ng th√°i t·ª´ file constants.py
try:
    from constants import *
except ImportError:
    print("L·ªói: Kh√¥ng th·ªÉ import constants.py. H√£y ch·∫Øc ch·∫Øn file n√†y t·ªìn t·∫°i v√† ·ªü c√πng th∆∞ m·ª•c.")
    # ƒê·ªãnh nghƒ©a c√°c h·∫±ng s·ªë d·ª± ph√≤ng n·∫øu import l·ªói
    STATUS_INSIDE = 1
    STATUS_COMPLETED = 2
    STATUS_INVALID = 99
    STATUS_FAIL_NO_PLATE = 10
    STATUS_FAIL_PLATE_INSIDE = 11
    STATUS_FAIL_PLATE_MISMATCH = 12

DB_FILE = os.getenv("DB_FILE", "parking_data.db")
PICTURE_DIR = os.getenv("PICTURE_OUTPUT_DIR", "picture")

# --- Helper Functions ---

def get_time_str(offset_minutes=0):
    """L·∫•y chu·ªói th·ªùi gian (UTC+7) v·ªõi ƒë·ªô l·ªách ph√∫t cho tr∆∞·ªõc."""
    # S·ª≠ d·ª•ng m√∫i gi·ªù c·ªë ƒë·ªãnh ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n khi ch·∫°y l·∫°i
    dt = datetime.utcnow() + timedelta(hours=7) + timedelta(minutes=offset_minutes)
    return dt.strftime('%Y-%m-%d %H:%M:%S')

def generate_rfid():
    """T·∫°o m·ªôt ID th·∫ª RFID d·∫°ng s·ªë ng·∫´u nhi√™n."""
    return str(uuid.uuid4().int & (1<<64)-1)[:10]

def execute_query(conn, query, params=()):
    """Th·ª±c thi m·ªôt c√¢u l·ªánh SQL tr√™n m·ªôt k·∫øt n·ªëi ƒë√£ c√≥."""
    cursor = conn.cursor()
    cursor.execute(query, params)
    return cursor.lastrowid

def find_real_image():
    """T√¨m m·ªôt file ·∫£nh th·∫≠t trong th∆∞ m·ª•c picture ƒë·ªÉ s·ª≠ d·ª•ng cho test."""
    if not os.path.exists(PICTURE_DIR):
        return None
    for filename in os.listdir(PICTURE_DIR):
        if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
            return filename
    return None

# --- Database Operations ---

def clear_database():
    """X√≥a t·∫•t c·∫£ d·ªØ li·ªáu kh·ªèi CSDL v√† reset ID."""
    try:
        with sqlite3.connect(DB_FILE) as conn:
            print(f"üßπ ƒêang x√≥a t·∫•t c·∫£ d·ªØ li·ªáu kh·ªèi CSDL '{DB_FILE}'...")
            execute_query(conn, "DELETE FROM parking_log")
            execute_query(conn, "DELETE FROM sqlite_sequence WHERE name='parking_log'")
            conn.commit()
            print("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈© th√†nh c√¥ng.")
    except sqlite3.Error as e:
        print(f"‚ùå L·ªói CSDL khi ƒëang x√≥a d·ªØ li·ªáu: {e}")

def create_all_test_cases():
    """T·∫°o m·ªôt b·ªô d·ªØ li·ªáu th·ª≠ nghi·ªám to√†n di·ªán."""
    
    real_image_in = find_real_image()
    if real_image_in:
        print(f"üñºÔ∏è  T√¨m th·∫•y ·∫£nh th·∫≠t ƒë·ªÉ ki·ªÉm tra t·∫£i l√™n: '{real_image_in}'")
    else:
        print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y ·∫£nh th·∫≠t trong th∆∞ m·ª•c 'picture/'. C√°c k·ªãch b·∫£n t·∫£i ·∫£nh s·∫Ω d√πng ·∫£nh gi·∫£ l·∫≠p.")
        real_image_in = "real_image_placeholder_in.jpg"

    real_image_out = "real_image_placeholder_out.jpg"

    # ƒê·ªãnh nghƒ©a t·∫•t c·∫£ c√°c k·ªãch b·∫£n
    scenarios = [
        {
            "description": "1. Giao d·ªãch c≈© kh√¥ng h·ª£p l·ªá (h·ªá th·ªëng ph·∫£i b·ªè qua, ƒë√£ ƒë·ªìng b·ªô)",
            "records": [
                {"plate": "OLD-INVALID", "rfid": "TOKEN-INVALID", "time_in": get_time_str(offset_minutes=-(3*1440)), "img_in": "placeholder_fail.jpg", "status": STATUS_INVALID, "synced": 1},
            ]
        },
        {
            "description": "2. Giao d·ªãch c≈© ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô (h·ªá th·ªëng ph·∫£i b·ªè qua)",
            "records": [
                {"plate": "OLD-SYNCED", "rfid": "TOKEN-SYNCED", "time_in": get_time_str(offset_minutes=-(2*1440)), "time_out": get_time_str(offset_minutes=-(2*1440) + 60), "img_in": "placeholder_in.jpg", "img_out": "placeholder_out.jpg", "status": STATUS_COMPLETED, "synced": 1},
            ]
        },
        {
            "description": "3. Xe v√†o-ra th√†nh c√¥ng c√°ch ƒë√¢y 1 ng√†y (ch∆∞a ƒë·ªìng b·ªô)",
            "records": [
                {"plate": "HN-SUCCESS", "rfid": "TOKEN-SUCCESS", "time_in": get_time_str(offset_minutes=-(1*1440)), "time_out": get_time_str(offset_minutes=-(1*1440) + 30), "img_in": "placeholder_in.jpg", "img_out": "placeholder_out.jpg", "status": STATUS_COMPLETED, "synced": 0},
            ]
        },
        {
            "description": "4. Xe hi·ªán ƒëang ·ªü trong b√£i, v√†o t·ª´ 5 gi·ªù tr∆∞·ªõc (ch∆∞a ƒë·ªìng b·ªô)",
            "records": [
                {"plate": "SG-INSIDE", "rfid": "TOKEN-INSIDE", "time_in": get_time_str(offset_minutes=-300), "img_in": "placeholder_in.jpg", "status": STATUS_INSIDE, "synced": 0},
            ]
        },
        {
            "description": "5. L·ªói: Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c bi·ªÉn s·ªë khi v√†o, 4 gi·ªù tr∆∞·ªõc (ch∆∞a ƒë·ªìng b·ªô)",
            "records": [
                {"plate": "UNKNOWN", "rfid": "TOKEN-NO-PLATE", "time_in": get_time_str(offset_minutes=-240), "img_in": "placeholder_fail.jpg", "status": STATUS_FAIL_NO_PLATE, "synced": 0},
            ]
        },
        {
            "description": "6. L·ªói: Xe v√†o c√≥ bi·ªÉn s·ªë ƒë√£ t·ªìn t·∫°i trong b√£i, 3 gi·ªù tr∆∞·ªõc (ch∆∞a ƒë·ªìng b·ªô)",
            "records": [
                # S·ª≠ d·ª•ng l·∫°i bi·ªÉn s·ªë 'SG-INSIDE' t·ª´ k·ªãch b·∫£n 4
                {"plate": "SG-INSIDE", "rfid": "TOKEN-DUPLICATE", "time_in": get_time_str(offset_minutes=-180), "img_in": "placeholder_fail.jpg", "status": STATUS_FAIL_PLATE_INSIDE, "synced": 0},
            ]
        },
        {
            "description": "7. L·ªói: Xe ra kh√¥ng kh·ªõp bi·ªÉn s·ªë, 2 gi·ªù tr∆∞·ªõc (ch∆∞a ƒë·ªìng b·ªô)",
            "records": [
                # ƒê·∫ßu ti√™n l√† m·ªôt xe v√†o b√¨nh th∆∞·ªùng
                {"plate": "DN-FOR-MISMATCH", "rfid": "TOKEN-MISMATCH", "time_in": get_time_str(offset_minutes=-150), "img_in": "placeholder_in.jpg", "status": STATUS_INSIDE, "synced": 0},
                # Sau ƒë√≥ l√† m·ªôt s·ª± ki·ªán ra th·∫•t b·∫°i v·ªõi c√πng token nh∆∞ng kh√°c bi·ªÉn s·ªë
                {"plate": "DN-WRONG-PLATE", "rfid": "TOKEN-MISMATCH", "time_in": get_time_str(offset_minutes=-120), "img_in": "placeholder_mismatch.jpg", "status": STATUS_FAIL_PLATE_MISMATCH, "synced": 0},
            ]
        },
        {
            "description": "8. Xe v√†o th√†nh c√¥ng v·ªõi ·∫¢NH TH·∫¨T, 1 gi·ªù tr∆∞·ªõc (ch∆∞a ƒë·ªìng b·ªô)",
            "records": [
                {"plate": "REAL-IMG-IN", "rfid": "TOKEN-REAL-IMG", "time_in": get_time_str(offset_minutes=-60), "img_in": real_image_in, "status": STATUS_INSIDE, "synced": 0},
            ]
        },
        {
            "description": "9. Xe ra th√†nh c√¥ng v·ªõi ·∫¢NH TH·∫¨T, 30 ph√∫t tr∆∞·ªõc (ho√†n th√†nh k·ªãch b·∫£n 8)",
            "update": {
                "rfid": "TOKEN-REAL-IMG",
                "updates": {"time_out": get_time_str(offset_minutes=-30), "img_out": real_image_out, "status": STATUS_COMPLETED, "synced": 0}
            }
        },
        {
            "description": "10. S·ª± ki·ªán v·ªõi ƒë∆∞·ªùng d·∫´n ·∫£nh kh√¥ng t·ªìn t·∫°i, 10 ph√∫t tr∆∞·ªõc (ch∆∞a ƒë·ªìng b·ªô)",
            "records": [
                {"plate": "IMG-NOT-FOUND", "rfid": "TOKEN-IMG-FAIL", "time_in": get_time_str(offset_minutes=-10), "img_in": "non_existent_image.jpg", "status": STATUS_INSIDE, "synced": 0},
            ]
        }
    ]

    try:
        with sqlite3.connect(DB_FILE) as conn:
            print("\nüå± B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu th·ª≠ nghi·ªám...")
            for scenario in scenarios:
                print(f"   -> {scenario['description']}")
                
                # X·ª≠ l√Ω c√°c b·∫£n ghi c·∫ßn ch√®n m·ªõi
                if "records" in scenario:
                    for record in scenario["records"]:
                        execute_query(conn, """
                            INSERT INTO parking_log (plate, rfid_token, time_in, time_out, image_path_in, image_path_out, status, synced_to_server)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                        """, (
                            record['plate'], record['rfid'], record['time_in'], record.get('time_out'),
                            record.get('img_in'), record.get('img_out'), record['status'], record['synced']
                        ))

                # X·ª≠ l√Ω c√°c b·∫£n ghi c·∫ßn c·∫≠p nh·∫≠t
                if "update" in scenario:
                    update_info = scenario["update"]
                    # S·ª≠a l·ªói: T√¨m b·∫£n ghi ƒë·ªÉ c·∫≠p nh·∫≠t ch·ªâ b·∫±ng RFID token,
                    # v√¨ status c·ªßa n√≥ c√≥ th·ªÉ kh√¥ng ph·∫£i l√† STATUS_INSIDE n·∫øu c√°c k·ªãch b·∫£n ch·∫°y kh√¥ng theo th·ª© t·ª±
                    # ho·∫∑c n·∫øu c√≥ c√°c s·ª± ki·ªán l·ªói li√™n quan.
                    execute_query(conn, """
                        UPDATE parking_log SET time_out = ?, image_path_out = ?, status = ?, synced_to_server = ?
                        WHERE rfid_token = ? AND time_out IS NULL
                    """, (
                        update_info['updates']['time_out'], update_info['updates']['img_out'],
                        update_info['updates']['status'], update_info['updates']['synced'],
                        update_info['rfid']
                    ))

            conn.commit()
            print("\n‚úÖ ƒê√£ t·∫°o d·ªØ li·ªáu th·ª≠ nghi·ªám to√†n di·ªán th√†nh c√¥ng!")
            print("B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y LPR.py ƒë·ªÉ xem qu√° tr√¨nh ƒë·ªìng b·ªô.")

    except sqlite3.Error as e:
        print(f"‚ùå L·ªói CSDL khi ƒëang t·∫°o d·ªØ li·ªáu: {e}")

# --- Main Execution ---

def main():
    """Hi·ªÉn th·ªã menu cho ng∆∞·ªùi d√πng."""
    print("--- B·ªò T·∫†O D·ªÆ LI·ªÜU TH·ª¨ NGHI·ªÜM TO√ÄN DI·ªÜN CHO H·ªÜ TH·ªêNG LPR ---")
    
    if not os.path.exists(DB_FILE):
        print(f"C·∫£nh b√°o: File CSDL '{DB_FILE}' kh√¥ng t·ªìn t·∫°i.")
        print("Vui l√≤ng ch·∫°y ·ª©ng d·ª•ng LPR.py √≠t nh·∫•t m·ªôt l·∫ßn ƒë·ªÉ t·∫°o file CSDL tr∆∞·ªõc khi ch·∫°y k·ªãch b·∫£n n√†y.")
        return

    while True:
        print("\nL·ª±a ch·ªçn c·ªßa b·∫°n:")
        print("  1. X√≥a CSDL v√† t·∫°o b·ªô d·ªØ li·ªáu th·ª≠ nghi·ªám m·ªõi (Khuy·∫øn ngh·ªã)")
        print("  2. Ch·ªâ x√≥a to√†n b·ªô d·ªØ li·ªáu trong CSDL")
        print("  3. Tho√°t")
        choice = input("Nh·∫≠p l·ª±a ch·ªçn: ").strip()

        if choice == '1':
            clear_database()
            create_all_test_cases()
            break
        elif choice == '2':
            clear_database()
            break
        elif choice == '3':
            print("ƒê√£ h·ªßy. Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.")
            break
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")

if __name__ == "__main__":
    main()
